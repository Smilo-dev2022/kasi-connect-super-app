name: CI

on:
  push:
    branches: [ main, develop, feature/**, cursor/** ]
  pull_request:
    branches: [ main, develop ]

jobs:
  web-admin:
    name: Web Admin Lint and Typecheck
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: web-admin
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web-admin/package-lock.json
      - name: Install
        run: npm ci
      - name: Lint
        run: npm run lint -- --max-warnings=0 || npm run lint
      - name: Typecheck (build)
        run: npm run build --if-present

  moderation-python:
    name: Moderation Service Python Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: moderation_service
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Import and start check
        run: |
          python - << 'PY'
          import importlib
          import sys
          try:
              import app.main as m
              print('Imported:', m.create_app)
          except Exception as e:
              print('Import error:', e)
              sys.exit(1)
          PY
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

jobs:
  node:
    name: Node - ${{ matrix.project }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - project: root
            path: .
            run_lint: true
          - project: backend
            path: backend
            run_lint: false
          - project: web-admin
            path: web-admin
            run_lint: false
          - project: agent7-messaging
            path: agent7-messaging
            run_lint: false
          - project: agent9-search
            path: agent9-search
            run_lint: false
          - project: media-service
            path: services/media
            run_lint: false
          - project: events-service
            path: events-service
            run_tests: false
            run_lint: false
    defaults:
      run:
        working-directory: ${{ matrix.path }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ format('{0}/package-lock.json', matrix.path) }}
      - name: Install dependencies
        run: if [ -f package-lock.json ]; then npm ci --no-fund --no-audit; else npm install --no-fund --no-audit; fi
      - name: Lint
        if: ${{ matrix.run_lint != false }}
        run: npm run lint --if-present
      - name: Test
        if: ${{ matrix.run_tests != false }}
        run: npm test --if-present
      - name: Upload coverage (agent7-messaging)
        if: matrix.project == 'agent7-messaging'
        uses: actions/upload-artifact@v4
        with:
          name: agent7-coverage
          path: agent7-messaging/coverage
          if-no-files-found: ignore
      - name: Build
        run: npm run build --if-present
      - name: Typecheck (root only)
        if: matrix.project == 'root'
        run: npx tsc -p tsconfig.app.json --noEmit

  python:
    name: Python lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install dependencies (if requirements exist)
        run: |
          set -e
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f events_service/requirements.txt ]; then pip install -r events_service/requirements.txt; fi
          if [ -f moderation_service/requirements.txt ]; then pip install -r moderation_service/requirements.txt; fi
      - run: python -m pip install --upgrade pip ruff
      - name: Ruff check
        run: ruff check . --exclude node_modules --exclude dist --exclude .next --exclude build

  terraform:
    name: Terraform validate
    runs-on: ubuntu-latest
    if: hashFiles('infra/*.tf') != ''
    defaults:
      run:
        working-directory: infra
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
      - run: terraform init -backend=false -input=false
      - run: terraform validate