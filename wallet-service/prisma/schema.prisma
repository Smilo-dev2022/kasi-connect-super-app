// datasource and generator
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id        String        @id @default(cuid())
  userId    String
  balance   Float         @default(0)
  currency  String        @default("USD")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  transactions Transaction[]

  @@index([userId])
}

model Transaction {
  id           String   @id @default(cuid())
  accountId    String
  amount       Float
  type         TransactionType
  description  String?
  balanceAfter Float
  createdAt    DateTime @default(now())

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  // Onramp integration (optional linkage)
  onrampOrderId String?
  onrampOrder   OnrampOrder? @relation(fields: [onrampOrderId], references: [id])
  partnerRef    String?
  txHash        String?

  @@index([onrampOrderId])
}

enum TransactionType {
  CREDIT
  DEBIT
}

// Onramp stablecoin remittance order
model OnrampOrder {
  id                   String         @id @default(cuid())
  side                 OnrampSide
  status               OnrampStatus   @default(PENDING_FIAT)
  fiatCurrency         String         // e.g., ZAR
  cryptoAsset          String         // e.g., USDC
  fiatAmountCents      Int            // amounts in cents
  cryptoAmountBaseUnits Int           // base units (e.g., 10^-6 for USDC)
  partnerRef           String?
  expiresAt            DateTime?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt

  // Back-references
  transactions Transaction[]

  @@index([status])
  @@index([partnerRef])
}

enum OnrampSide {
  BUY
  SELL
}

enum OnrampStatus {
  PENDING_FIAT
  PROCESSING
  COMPLETED
  FAILED
}
